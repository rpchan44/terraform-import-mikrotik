#!/usr/bin/env python3
import os
import re
import sys
from librouteros import connect

# --- MikroTik credentials ---
HOST = "192.168.62.1"
USER = "terraform"
PASS = "terraform"
PORT = 8728

# --- Output files ---
TF_FILE = "ospf.tf"
IMPORT_FILE = "ospf_imports.sh"


def connect_mikrotik():
    try:
        api = connect(username=USER, password=PASS, host=HOST, port=PORT, timeout=10)
        print(f"‚úÖ Connected to {HOST}:{PORT}")
        return api
    except Exception as e:
        print(f"‚ùå Failed to connect: {e}")
        sys.exit(1)


def sanitize_name(name):
    """Make Terraform-safe names."""
    return re.sub(r"[^a-zA-Z0-9_]", "_", str(name or "unnamed").lower())


def make_tf_block(resource, name, fields):
    lines = [f'resource "{resource}" "{name}" {{']
    for k, v in fields.items():
        if v not in (None, "", [], {}, "false", False):
            lines.append(f'  {k.replace("-", "_")} = "{v}"')
    lines.append("}\n")
    return "\n".join(lines)


def fetch(api, path, exclude_dynamic=True):
    try:
        entries = []
        for e in api.path(path):
            if exclude_dynamic and e.get("dynamic") == "true":
                continue
            entries.append(e)
        return entries
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to fetch {path}: {e}")
        return []


def write_files(tf_blocks, import_cmds):
    with open(TF_FILE, "w") as f:
        f.write("# Generated by import_ospf.py\n\n")
        f.write("\n".join(tf_blocks))
    print(f"‚úÖ Terraform configuration written to {TF_FILE}")

    with open(IMPORT_FILE, "w") as f:
        f.write("#!/bin/bash\n# Generated by import_ospf.py\n\n")
        for cmd in import_cmds:
            f.write(cmd + "\n")
    os.chmod(IMPORT_FILE, 0o755)
    print(f"‚úÖ Terraform import commands written to {IMPORT_FILE}")


def import_ospf(api):
    tf_blocks = []
    import_cmds = []

    sections = {
        "routing/ospf/instance": "routeros_routing_ospf_instance",
        "routing/ospf/area": "routeros_routing_ospf_area",
        "routing/ospf/interface-template": "routeros_routing_ospf_interface_template",
        "routing/ospf/neighbor": "routeros_routing_ospf_neighbor",
    }

    for path, tf_resource in sections.items():
        print(f"üì• Fetching {path} ...")
        entries = fetch(api, path)
        for e in entries:
            name = sanitize_name(e.get("name") or e.get("interface") or e.get(".id"))
            fields = {k.replace("-", "_"): v for k, v in e.items() if not k.startswith(".")}
            tf_blocks.append(make_tf_block(tf_resource, name, fields))
            import_cmds.append(f"terraform import {tf_resource}.{name} '{e['.id']}'")
        print(f"‚úÖ Imported {len(entries)} entries from {path}")

    return tf_blocks, import_cmds


def main():
    api = connect_mikrotik()
    tf_blocks, import_cmds = import_ospf(api)
    write_files(tf_blocks, import_cmds)

    print("\nüöÄ Ready to import:")
    for cmd in import_cmds:
        print("  " + cmd)

    print("\nRun:")
    print("  ./ospf_imports.sh")
    print("to execute all Terraform imports.")


if __name__ == "__main__":
    main()

