#!/usr/bin/env python3
import os
import re
import sys
import subprocess
from librouteros import connect

# --- MikroTik API credentials ---
HOST = "192.168.62.1"
USER = "terraform"
PASS = "terraform"
PORT = 8728

# --- Output files ---
TF_FILE = "interfaces.tf"
IMPORT_FILE = "interfaces_imports.sh"


def connect_mikrotik():
    """Connect to MikroTik RouterOS via API."""
    try:
        api = connect(username=USER, password=PASS, host=HOST, port=PORT, timeout=10)
        print(f"‚úÖ Connected to {HOST}:{PORT}")
        return api
    except Exception as e:
        print(f"‚ùå Failed to connect: {e}")
        sys.exit(1)


def sanitize_name(name):
    """Convert any name into Terraform-safe format."""
    return re.sub(r"[^a-zA-Z0-9_]", "_", str(name).lower().strip() or "entry")


def make_tf_block(resource, name, fields):
    """Generate a Terraform resource block."""
    lines = [f'resource "{resource}" "{name}" {{']
    for k, v in fields.items():
        if v not in (None, "", [], {}):
            lines.append(f'  {k} = "{v}"')
    lines.append("}\n")
    return "\n".join(lines)


def fetch(api, path, exclude_dynamic=True):
    """Fetch RouterOS entries via API."""
    try:
        result = []
        for entry in api.path(path):
            if exclude_dynamic and entry.get("dynamic") == "true":
                continue
            result.append(entry)
        return result
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to fetch {path}: {e}")
        return []


def write_files(tf_blocks, import_cmds):
    """Write Terraform and import scripts."""
    with open(TF_FILE, "w") as f:
        f.write("# Generated by import_pppoe_full.py\n\n")
        f.write("\n".join(tf_blocks))
    print(f"‚úÖ Terraform definitions written to {TF_FILE}")

    with open(IMPORT_FILE, "w") as f:
        f.write("#!/bin/bash\n# Generated by import_pppoe_full.py\n\n")
        for cmd in import_cmds:
            f.write(cmd + "\n")
    os.chmod(IMPORT_FILE, 0o755)
    print(f"‚úÖ Import commands written to {IMPORT_FILE}")


def import_resources(api):
    tf_blocks = []
    import_cmds = []

    mappings = {
        "interface/ethernet": "routeros_interface_ethernet",
        "interface/vlan": "routeros_interface_vlan",
        "interface/bridge": "routeros_interface_bridge",
        "interface/bridge/port": "routeros_interface_bridge_port",
        "interface/bonding": "routeros_interface_bonding",
        "interface/macvlan": "routeros_interface_macvlan",
        "interface/pppoe-client": "routeros_interface_pppoe_client",
        "interface/pppoe-server/server": "routeros_interface_pppoe_server",
    }

    for path, tf_resource in mappings.items():
        print(f"üì• Fetching {path}...")
        entries = fetch(api, path)
        for e in entries:
            name = sanitize_name(e.get("name") or e.get(".id"))
            fields = {k.replace("-", "_"): v for k, v in e.items() if not k.startswith(".")}
            tf_blocks.append(make_tf_block(tf_resource, name, fields))
            import_cmds.append(f"terraform import {tf_resource}.{name} '{e['.id']}'")
        print(f"‚úÖ Found {len(entries)} entries in {path}")

    # DHCP clients
    print("üì• Fetching DHCP clients...")
    dhcp_clients = fetch(api, "ip/dhcp-client")
    for d in dhcp_clients:
        name = sanitize_name(d.get("interface") or d.get(".id"))
        fields = {
            "interface": d.get("interface"),
            "use_peer_dns": d.get("use-peer-dns"),
            "use_peer_ntp": d.get("use-peer-ntp"),
            "add_default_route": d.get("add-default-route"),
            "default_route_distance": d.get("default-route-distance"),
            "comment": d.get("comment"),
        }
        tf_blocks.append(make_tf_block("routeros_ip_dhcp_client", name, fields))
        import_cmds.append(f"terraform import routeros_ip_dhcp_client.{name} '{d['.id']}'")
    print(f"‚úÖ Found {len(dhcp_clients)} DHCP clients")

    # PPP profiles
    print("üì• Fetching PPP profiles...")
    ppp_profiles = fetch(api, "ppp/profile")
    for p in ppp_profiles:
        name = sanitize_name(p.get("name") or p.get(".id"))
        fields = {
            "local_address": p.get("local-address"),
            "remote_address": p.get("remote-address"),
            "use_mpls": p.get("use-mpls"),
            "only_one": p.get("only-one"),
            "rate_limit": p.get("rate-limit"),
            "dns_server": p.get("dns-server"),
            "comment": p.get("comment"),
        }
        tf_blocks.append(make_tf_block("routeros_ppp_profile", name, fields))
        import_cmds.append(f"terraform import routeros_ppp_profile.{name} '{p['.id']}'")
    print(f"‚úÖ Found {len(ppp_profiles)} PPP profiles")

    # IP pools
    print("üì• Fetching IP pools...")
    ip_pools = fetch(api, "ip/pool")
    for pool in ip_pools:
        name = sanitize_name(pool.get("name") or pool.get(".id"))
        fields = {
            "ranges": pool.get("ranges"),
            "next_pool": pool.get("next-pool"),
            "comment": pool.get("comment"),
        }
        tf_blocks.append(make_tf_block("routeros_ip_pool", name, fields))
        import_cmds.append(f"terraform import routeros_ip_pool.{name} '{pool['.id']}'")
    print(f"‚úÖ Found {len(ip_pools)} IP pools")

    return tf_blocks, import_cmds


def main():
    api = connect_mikrotik()
    tf_blocks, import_cmds = import_resources(api)
    write_files(tf_blocks, import_cmds)

    print("\nüöÄ Ready to import:")
    for cmd in import_cmds:
        print("  " + cmd)

    print("\nRun:")
    print("  ./interfaces_imports.sh")
    print("to execute all Terraform imports.")


if __name__ == "__main__":
    main()

