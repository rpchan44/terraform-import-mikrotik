#!/usr/bin/env python3
import librouteros

# -----------------------------
# Router and Certificate Details
# -----------------------------
ROUTER_HOST = '192.168.62.1'
ROUTER_USER = 'terraform'
ROUTER_PASSWORD = 'terraform'

CA_NAME = "ca-cert"
CA_CN = "ca"
WEBFIG_NAME = "webfig"
WEBFIG_CN = "192.168.62.1"

COUNTRY = "PH"
LOCALITY = "Manila"
ORGANIZATION = "Digital"

DISABLED_SERVICES = { "ftp": 21, "telnet": 23, "www": 80, "ssh": 22 }
ENABLED_SERVICES = { "winbox": 8291 }
SSL_SERVICES = { "api": 8728, "api-ssl": 8729, "www-ssl": 443 }

# -----------------------------
# Connect to MikroTik API
# -----------------------------
def connect_api():
    api = librouteros.connect(
        host=ROUTER_HOST,
        username=ROUTER_USER,
        password=ROUTER_PASSWORD,
        use_ssl=False
    )
    return api

# -----------------------------
# Certificate Utility Functions
# -----------------------------
def get_cert_id(api, name):
    certs = list(api('/certificate/print'))
    cert = next((c for c in certs if c['name'] == name), None)
    if not cert:
        raise ValueError(f"Certificate '{name}' not found")
    return cert['.id']

def create_ca(api):
    cmd = {
        "name": CA_NAME,
        "common-name": CA_CN,
        "key-usage": "key-cert-sign",
        "subject-alt-name": "",
        "country": COUNTRY,
        "locality": LOCALITY,
        "organization": ORGANIZATION
    }
    list(api('/certificate/add', **cmd))
    ca_id = get_cert_id(api, CA_NAME)
    list(api('/certificate/set', **{'.id': ca_id, 'trusted': 'yes'}))
    print(f"✅ CA '{CA_NAME}' created and trusted with ID {ca_id}")
    return ca_id

def self_sign_ca(api, ca_name):
    ca_id = get_cert_id(api, ca_name)
    list(api('/certificate/sign', **{'.id': ca_id}))
    print(f"✅ CA '{ca_name}' self-signed")

def create_request(api, name, cn):
    cmd = {
        "name": name,
        "common-name": cn,
        "key-usage": "tls-server",
        "subject-alt-name": "",
        "country": COUNTRY,
        "locality": LOCALITY,
        "organization": ORGANIZATION
    }
    list(api('/certificate/add', **cmd))
    req_id = get_cert_id(api, name)
    print(f"✅ Certificate request '{name}' created with ID {req_id}")
    return req_id

def sign_certificate(api, cert_name, ca_name):
    cert_id = get_cert_id(api, cert_name)
    list(api('/certificate/sign', **{'.id': cert_id, 'ca': ca_name}))
    print(f"✅ Certificate '{cert_name}' signed by CA '{ca_name}'")
    return cert_id

def bind_www_ssl(api, cert_name):
    list(api('/ip/service/set', numbers='www-ssl', certificate=cert_name))
    print(f"✅ Certificate '{cert_name}' bound to www-ssl")

# -----------------------------
# Terraform File Generation
# -----------------------------
def generate_terraform_files(api):
    tf_content = f"""
resource "routeros_system_certificate" "ca-cert" {{
  name = "{CA_NAME}"
}}

resource "routeros_system_certificate" "webfig" {{
  name = "{WEBFIG_NAME}"
}}

resource "routeros_ip_service" "disabled" {{
  for_each = {{ {', '.join(f'"{k}" = {v}' for k, v in DISABLED_SERVICES.items())} }}
  numbers  = each.key
  port     = each.value
  disabled = true
}}

resource "routeros_ip_service" "enabled" {{
  for_each = {{ {', '.join(f'"{k}" = {v}' for k, v in ENABLED_SERVICES.items())} }}
  numbers  = each.key
  port     = each.value
  disabled = false
}}

resource "routeros_ip_service" "ssl" {{
  for_each    = {{ {', '.join(f'"{k}" = {v}' for k, v in SSL_SERVICES.items())} }}
  numbers     = each.key
  port        = each.value
  tls_version = "only-1.2"
  certificate = routeros_system_certificate.webfig.name
}}
"""
    with open("routeros_certificate.tf", "w") as f:
        f.write(tf_content.strip() + "\n")
    print("✅ routeros_certificate.tf written")

    ca_id = get_cert_id(api, CA_NAME)
    webfig_id = get_cert_id(api, WEBFIG_NAME)

    import_lines = [
        f'import {{\n  to = routeros_system_certificate.ca-cert\n  id = "{ca_id}"\n}}',
        f'import {{\n  to = routeros_system_certificate.webfig\n  id = "{webfig_id}"\n}}'
    ]

    # Add IP service imports
    services = list(api('/ip/service/print'))
    for svc in services:
        name = svc['name']
        if name in DISABLED_SERVICES:
            import_lines.append(f'import {{\n  to = routeros_ip_service.disabled["{name}"]\n  id = "{svc[".id"]}"\n}}')
        elif name in ENABLED_SERVICES:
            import_lines.append(f'import {{\n  to = routeros_ip_service.enabled["{name}"]\n  id = "{svc[".id"]}"\n}}')
        elif name in SSL_SERVICES:
            import_lines.append(f'import {{\n  to = routeros_ip_service.ssl["{name}"]\n  id = "{svc[".id"]}"\n}}')

    with open("import_cert.tf", "w") as f:
        f.write("\n".join(import_lines) + "\n")
    print("✅ import_cert.tf written with service imports")

# -----------------------------
# Main Script
# -----------------------------
def main():
    api = connect_api()
    create_ca(api)
    self_sign_ca(api, CA_NAME)
    create_request(api, WEBFIG_NAME, WEBFIG_CN)
    sign_certificate(api, WEBFIG_NAME, CA_NAME)
    bind_www_ssl(api, WEBFIG_NAME)
    generate_terraform_files(api)

if __name__ == "__main__":
    main()

